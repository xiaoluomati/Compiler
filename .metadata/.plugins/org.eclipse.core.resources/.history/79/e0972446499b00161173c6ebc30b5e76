package lexer.fa;

import java.util.Iterator;
import java.util.List;
import java.util.Vector;

public class State {

	private String identity;
	
	private Vector<Edge> edgesStart;
	
	private Vector<Edge> edgesEnd;

	public State(String identity) {
		super();
		this.identity = identity;
		this.edgesStart = new Vector<>();
		this.edgesEnd = new Vector<>();
	}

	public String getIdentity() {
		return identity;
	}

	public void setIdentity(String identity) {
		this.identity = identity;
	}
	
	public void addStartEdge(Edge edge){
		edgesStart.addElement(edge);
	}
	
	public void addEndEdge(Edge edge) {
		edgesEnd.addElement(edge);
	}
	
	public static State mergeAll(List<State> states) {
		if(states.size() < 2)
			return null;
		State result = null;
		for (int i = 1; i < states.size(); i++) {
			
		}
		return result;
	}
	
	public State merge(State state) {
		
//		List<String> inputs1 = this.getInputs();
//		List<String> inputs2 = this.getInputs();
//		for (String string : inputs1) {
//			if(!inputs2.contains(string))
//				return null;
//		}
//		for (String string : inputs2) {
//			if(!inputs1.contains(string))
//				return null;
//		}
		
		State result = new State(identity);
		for (Edge edge : state.edgesEnd) {
			new Edge(edge.getInput(), edge.getStart(), result);
		}
		for (Edge edge : edgesEnd) {
			new Edge(edge.getInput(), edge.getStart(), result);
		}
		for (String string : this.getInputs()) {
			new Edge(string, result, this.getStatesByOneInput(string).get(0));
		}
		return result;
	}
	
	public List<State> getStatesByOneInput(String input){
		List<State> states = new Vector<>();
		for (Edge edge : edgesStart) {
			if(edge.getInput().equals(input)){
				states.add(edge.getEnd());
			}
		}
		return states;
	}
	
	public List<String> getInputs(){
		List<String> inputs = new Vector<>();
		for (Edge edge : edgesStart) {
			if(!inputs.contains(edge.getInput())){
				inputs.add(edge.getInput());
			}
		}
		return inputs;
	}
	
}
