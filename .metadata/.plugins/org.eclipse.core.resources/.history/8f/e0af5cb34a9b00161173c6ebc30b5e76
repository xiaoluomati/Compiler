package lexer.fa;

import java.util.List;
import java.util.Vector;

public class State {

	private String identity;
	
	private Vector<Edge> edgesStart;
	
	private Vector<Edge> edgesEnd;
	
	public static void main(String[] args) {
		State A = new State("A");
		State B = new State("B");
		State C = new State("C");
		State D = new State("D");
		State E = new State("E");
		Edge edge1 = new Edge("a", A, B); 
		Edge edge2 = new Edge("a", C, B);
		Edge edge3 = new Edge("b", A, D);
		Edge edge4 = new Edge("b", C, D);
		Edge edge5 = new Edge("a", E, A);
		Edge edge6 = new Edge("a", D, C);
		
		List<State> states = new Vector<>();
		states.add(A);
		states.add(C);
		State state = mergeAll(states);
	}

	public State(String identity) {
		super();
		this.identity = identity;
		this.edgesStart = new Vector<>();
		this.edgesEnd = new Vector<>();
	}

	public String getIdentity() {
		return identity;
	}

	public void setIdentity(String identity) {
		this.identity = identity;
	}
	
	public void addStartEdge(Edge edge){
		edgesStart.addElement(edge);
	}
	
	public void addEndEdge(Edge edge) {
		edgesEnd.addElement(edge);
	}
	
	public static State mergeAll(List<State> states) {
		if(states.isEmpty())
			return null;
		State result = states.get(0);
		for (int i = 1; i < states.size(); i++) {
			result = result.merge(states.get(i));
		}
		return result;
	}
	
	public State merge(State state) {
		
		State result = new State(identity);
		for (Edge edge : state.edgesEnd) {
			new Edge(edge.getInput(), edge.getStart(), result);
		}
		for (Edge edge : edgesEnd) {
			new Edge(edge.getInput(), edge.getStart(), result);
		}
		for (String string : this.getInputs()) {
			new Edge(string, result, this.getStatesByOneInput(string).get(0));
		}
		return result;
	}
	
	public List<State> getStatesByOneInput(String input){
		List<State> states = new Vector<>();
		for (Edge edge : edgesStart) {
			if(edge.getInput().equals(input)){
				states.add(edge.getEnd());
			}
		}
		return states;
	}
	
	public List<String> getInputs(){
		List<String> inputs = new Vector<>();
		for (Edge edge : edgesStart) {
			if(!inputs.contains(edge.getInput())){
				inputs.add(edge.getInput());
			}
		}
		return inputs;
	}
	
}
