package lexer.fa;

import java.util.Iterator;
import java.util.List;
import java.util.Vector;

import lexer.Tool;

public class StateGroup implements Iterable<State>{
	
	private List<State> states;
	
	public StateGroup() {
		states = new Vector<>();
	}
	
	public StateGroup(List<State> datas){
		states = datas;
	}
	
	public void add(State state){
		if(!states.contains(state)){
			states.add(state);
		}
	}
	
	public void add(StateGroup set){
		for (State state : set) {
			if(!states.contains(state)){
				states.add(state);
			}
		}
	}
	
	public static boolean isInAGroup(List<StateGroup> stateGroups, StateGroup group) {
		int[] arr = new int[group.states.size()];
		int k = 0;
		for (State state : group) {
			for (int i = 0; i < stateGroups.size(); i++) {
				if(stateGroups.get(i).states.contains(state)){
					arr[k] = i;
					break;
				}
			}
			k++;
		}
		for (int i : arr) {
			if(arr[0] != arr[i]){
				return false;
			}
		}
		return true;
	}
	
	public boolean isSubSetOf(StateGroup set){
		for (State state : states) {
			if(!set.states.contains(state))
				return false;
		}
		return true;
	}
	
	public void print(){
		for (State state : states) {
			System.out.print(state+" ");
		}
		System.out.println();
		Tool.printline();
	}

	@Override
	public Iterator<State> iterator() {
		return states.iterator();
	}
	
	@Override
	public boolean equals(Object obj) {
		StateGroup set = (StateGroup) obj;
		return set.isSubSetOf(this) && this.isSubSetOf(set);
	}
}
